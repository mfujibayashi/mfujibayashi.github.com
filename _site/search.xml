<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[AndroidのStorage Access Frameworkを使ったサンプル]]></title>
      <url>/java/android/2020/05/05/android_saf/</url>
      <content type="text"><![CDATA[はじめにAndroidでUSBメモリに格納したファイルを開くにはどの手段を使うのが正解かを調べた結果、Storage Access Framework(SAF)を使うのが正解との結論に達したので、サンプルコードを書いて確認しました。背景お仕事関係でAndroidプログラムを作る必要が発生しました。要件の一つにUSBメモリに格納したファイルを開く必要があったので、その方法を調べました。Androidのストレージ周りは複雑怪奇・・・。内蔵フラッシュでも、外付けストレージ扱いになったりしているのは知っていたけれども、予想以上の複雑さ。私が調べた限りでは、USBメモリのファイルにアクセスする確実な方法はSAFしかありませんでした。Androidのバージョンアップの度にUSBメモリへのアクセス方法が塞がれているようなので、SAFを使うべきです。サンプルコードのリポジトリgithubのリポジトリサンプルコードの簡単な説明SAFはMIME Typeでフィルターできます。そこで、”Music Open”ボタンと”Image Open”ボタンを用意し、”Music Open”ボタンをタップしたときはaudio/*, video/*でフィルター、”Image Open”ボタンをタップしたときはimage/*でフィルターするようにしています。コードそのものは、Googleのドキュメントの内容そのままです。“Music Open”の選択結果をVideo Viewで再生させています。また、”Image Open”の選択結果をImage Viewで表示させています。AndroidのUIVideo View, Audio Viewの表示切り替えにFragmentを使っています。が、あまり理解せずに実装したので、おかしなコードになっている可能性もあります。最後にAndroidのUI回りと言うか、基礎の部分を理解するためにお薦めの本やWebページはありませんかね。]]></content>
      <categories>
        
          <category> Java </category>
        
          <category> Android </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Javaでbyte配列からshort配列、int配列へコピー、その逆のサンプル]]></title>
      <url>/java/2020/05/01/javaarraycopy/</url>
      <content type="text"><![CDATA[はじめにJavaでbyte配列からshort配列、Int配列にコピーする、その逆方向へコピーするコードを書く機会がありました。初めは普通にシフト演算で作ったのですが、Javaらしい書き方があるはずだとのことで調べたところ、ByteBufferクラスを使った書き方があることが解りました。githubのリポジトリgithubのリポジトリポイントByteBuffer.order()でエンディアンを指定します。値を入力するときは、ByteBuffer.put(), ByteBuffer.putShort(), ByteBuffer.pusInt()を使います。値を得るときは、ByteBuffer.get(), ByteBuffer.getShort(), ByteBuffer.getInt()を使います。これでエンディアンを考慮した値のコピーが出来ます。例えば、byte配列からInt配列へのコピーは次のようなコードになります。  public  void copyArrayFromByte(byte[] byteArray, int[] intArray){    int length = intArray.length;    int i;    ByteBuffer buffer = ByteBuffer.allocate(Integer.BYTES*length);    if(isEndian == Endian.BIG_ENDIAN){        buffer.order(ByteOrder.BIG_ENDIAN);    }else{        buffer.order(ByteOrder.LITTLE_ENDIAN);    }    for(i=0; i&lt; length*4; i++){      buffer.put(byteArray[i]);    }    buffer.flip();    for(i=0; i&lt; length; i++){      intArray[i] =  buffer.getInt();    }  }「ビッグエンディアンは最上位桁がアドレス下位になるので」、みたいなことを思い出さずに済みます。サンプルコードサンプルコードでは配列間コピーをするクラスを作成しています。コードを見て直ぐに内容がわかると思うので、参考にしてください。最後にもうちょっと良い書き方がありそうな気がしています。]]></content>
      <categories>
        
          <category> Java </category>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
